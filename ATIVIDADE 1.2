ALUNO: ALISSON COSTA MOREIRA
CURSO: LICENCIATURA EM COMPUTAÇÃO
DISCIPLINA: ESTRUTURA DE DADOS
ATIVIDADE.2

////////////////////////////////////////////////////////////////

QUESTÃO 01

Nesse primeiro algoritmo veremos: 

1 -A pilha original será preenchida com 10 números aleatórios
2 -  Vamos imprimir a pilha original
3 -  Iremos Inverter a pilha
4 -  Por Ultimo iremos imprimir a pilha invertida

import java.util.Stack;
import java.util.Random;

public class ReverseStack {
    public static void main(String[] args) {
        Stack<Integer> originalStack = new Stack<>();
        Stack<Integer> tempStack = new Stack<>();
        Random rand = new Random();

        
        for (int i = 0; i < 10; i++) {
            originalStack.push(rand.nextInt(100) + 1);  // Números de 1 a 100
        }

       
        System.out.println("Original Stack: " + originalStack);

        
        while (!originalStack.isEmpty()) {
            tempStack.push(originalStack.pop());
        }
        originalStack = tempStack;

       
        System.out.println("Reversed Stack: " + originalStack);
    }
}

//////////////////////////////////////////////////////////////

QUESTÃO 02

Nesse algoritmo teremos 3 etapas importantes que serão : 

1 - será Criado a fila com as n pessoas
2 - Vamos Simular o processo de eliminação
3 - Será retornado o elemento restante na fila

import java.util.LinkedList;
import java.util.Queue;

public class Josephus {
    public static int josephusProcess(int n, int m) {
        Queue<Integer> queue = new LinkedList<>();

        
        for (int i = 1; i <= n; i++) {
            queue.offer(i);
        }

       
        while (queue.size() > 1) {
            for (int i = 1; i < m; i++) {
                queue.offer(queue.poll());
            }
            queue.poll(); 
        }

        
        return queue.poll();
    }

    public static void main(String[] args) {
        int n = 10; // Número de pessoas
        int m = 3; // Número de contagem
        int leader = josephusProcess(n, m);
        System.out.println("O líder é a pessoa " + leader);
    }
}

//////////////////////////////////////////////////////////////

QUESTÃO 03 

1 - Primeiro Será criado uma Pilha e uma Fila
2 - Depois vamos inserir elementos na Pilha e na Fila criada
3 - Os elementos serão mostrados na Pilha de forma organizada
4 - Os Elementos também serão exibidos de Forma organizada na fila.
5 - vamos remover 3 elementos de cada estrutura
6 - Sera exibido os elemntos restantes  na Pilha e na Fila 


import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        int[] dados = {50, 34, 88, 37, 87, 52, 81, 10, 43, 77, 18, 47};

        Stack<Integer> pilha = new Stack<>();
        Queue<Integer> fila = new LinkedList<>();

        for (int dado : dados) {
            pilha.push(dado);
            fila.offer(dado);
        }

        System.out.println("Elementos na Pilha:");
        while (!pilha.isEmpty()) {
            System.out.print(pilha.pop() + " ");
        }
        System.out.println();

        System.out.println("Elementos na Fila:");
        while (!fila.isEmpty()) {
            System.out.print(fila.poll() + " ");
        }
        System.out.println();

        for (int i = 0; i < 3; i++) {
            pilha.pop();
            fila.poll();
        }

        System.out.println("Elementos restantes na Pilha após remoção:");
        for (int i = pilha.size() - 1; i >= 0; i--) {
            System.out.print(pilha.get(i) + " ");
        }
        System.out.println();

        System.out.println("Elementos restantes na Fila após remoção:");
        for (int elemento : fila) {
            System.out.print(elemento + " ");
        }
        System.out.println();
    }
}

/////////////////////////////////////////////////////////////

QUESTÃO 04 

1 - Iremos transferir os elementos da fila para a pilha
2 - Os elementos serão tragos de volta para a fila (Pórem com a ordem invertida)
3 - Por ultimo será exibido os elementos da fila já com a ordem invertida




import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Queue<Integer> fila = new LinkedList<>();
        fila.offer(1);
        fila.offer(2);
        fila.offer(3);
        fila.offer(4);
        fila.offer(5);

        Stack<Integer> pilha = new Stack<>();

        while (!fila.isEmpty()) {
            pilha.push(fila.poll());
        }

        while (!pilha.isEmpty()) {
            fila.offer(pilha.pop());
        }

        System.out.println("Elementos da fila com a ordem invertida:");
        while (!fila.isEmpty()) {
            System.out.print(fila.poll() + " ");
        }
    }
}

///////////////////////////////////////////////////////////////

QUESTÃO 05 

! Não entendi bem essa questão e não tive tempo de solciona=la !



